import { ElementRef, ComponentFactoryResolver, ApplicationRef, Injector, EventEmitter } from '@angular/core';
export interface AdComponent {
    data: any;
    show: boolean;
    close: boolean;
    events: any;
}
export declare class TooltipDirective {
    private elementRef;
    private componentFactoryResolver;
    private appRef;
    private injector;
    hideTimeoutId: number;
    destroyTimeoutId: number;
    hideAfterClickTimeoutId: number;
    createTimeoutId: number;
    showTimeoutId: number;
    componentRef: any;
    elementPosition: any;
    _showDelay: any;
    _hideDelay: number;
    _id: any;
    _options: any;
    _defaultOptions: any;
    _destroyDelay: number;
    componentSubscribe: any;
    tooltipValue: string;
    options: any;
    placement: string;
    contentType: string;
    delay: number;
    hideDelayMobile: number;
    zIndex: number;
    animationDuration: number;
    trigger: string;
    tooltipClass: string;
    display: boolean;
    displayMobile: boolean;
    shadow: boolean;
    theme: boolean;
    offset: number;
    maxWidth: number;
    id: any;
    showDelay: number;
    hideDelay: number;
    readonly isTooltipDestroyed: any;
    destroyDelay: number;
    events: EventEmitter<any>;
    constructor(elementRef: ElementRef, componentFactoryResolver: ComponentFactoryResolver, appRef: ApplicationRef, injector: Injector);
    onMouseEnter(): void;
    onMouseLeave(): void;
    onClick(): void;
    ngOnInit(): void;
    ngOnDestroy(): void;
    getElementPosition(): void;
    createTooltip(): void;
    destroyTooltip(options?: {
        fast: boolean;
    }): void;
    showTooltipElem(): void;
    hideTooltip(): void;
    appendComponentToBody(component: any, data?: any): void;
    clearTimeouts(): void;
    readonly isDisplayOnHover: boolean;
    readonly isDisplayOnClick: boolean;
    readonly isMobile: boolean;
    applyOptionsDefault(defaultOptions: any, options: any): void;
    handleEvents(event: any): void;
    show(): void;
    hide(): void;
}
