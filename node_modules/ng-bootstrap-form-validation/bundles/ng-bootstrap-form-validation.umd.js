(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/forms'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('ng-bootstrap-form-validation', ['exports', '@angular/core', '@angular/forms', '@angular/common'], factory) :
    (factory((global['ng-bootstrap-form-validation'] = {}),global.ng.core,global.ng.forms,global.ng.common));
}(this, (function (exports,i0,forms,common) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var FormValidationDirective = /** @class */ (function () {
        function FormValidationDirective() {
            this.validSubmit = new i0.EventEmitter();
        }
        /**
         * @return {?}
         */
        FormValidationDirective.prototype.onSubmit = /**
         * @return {?}
         */
            function () {
                this.markAsTouchedAndDirty(this.formGroup);
                if (this.formGroup.valid) {
                    this.validSubmit.emit(this.formGroup.value);
                }
            };
        /**
         * @param {?} control
         * @return {?}
         */
        FormValidationDirective.prototype.markAsTouchedAndDirty = /**
         * @param {?} control
         * @return {?}
         */
            function (control) {
                var _this = this;
                if (control instanceof forms.FormGroup) {
                    Object.keys(control.controls).forEach(function (key) {
                        return _this.markAsTouchedAndDirty(control.controls[key]);
                    });
                }
                else if (control instanceof forms.FormArray) {
                    control.controls.forEach(function (c) { return _this.markAsTouchedAndDirty(c); });
                }
                else if (control instanceof forms.FormControl && control.enabled) {
                    control.markAsDirty();
                    control.markAsTouched();
                    control.updateValueAndValidity();
                }
            };
        FormValidationDirective.decorators = [
            { type: i0.Directive, args: [{
                        // tslint:disable-next-line:directive-selector
                        selector: "[formGroup]"
                    },] },
        ];
        FormValidationDirective.propDecorators = {
            formGroup: [{ type: i0.Input }],
            validSubmit: [{ type: i0.Output }],
            onSubmit: [{ type: i0.HostListener, args: ["submit",] }]
        };
        return FormValidationDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @enum {number} */
    var BootstrapVersion = {
        Three: 0,
        Four: 1,
    };
    BootstrapVersion[BootstrapVersion.Three] = 'Three';
    BootstrapVersion[BootstrapVersion.Four] = 'Four';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var CUSTOM_ERROR_MESSAGES = new i0.InjectionToken("ng-bootstrap-form-validation custom error messages");
    /** @type {?} */
    var BOOTSTRAP_VERSION = new i0.InjectionToken("ng-bootstrap-form-validation module options");

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var MessagesComponent = /** @class */ (function () {
        function MessagesComponent(bootstrapVersion) {
            this.bootstrapVersion = bootstrapVersion;
            this.messages = function () { return []; };
        }
        Object.defineProperty(MessagesComponent.prototype, "className", {
            get: /**
             * @return {?}
             */ function () {
                switch (this.bootstrapVersion) {
                    case BootstrapVersion.Three:
                        return "help-block";
                    case BootstrapVersion.Four:
                        return "invalid-feedback";
                }
            },
            enumerable: true,
            configurable: true
        });
        MessagesComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: "bfv-messages",
                        template: "\n    <span [ngClass]=\"className\" *ngFor=\"let message of messages()\">{{message}}</span>\n  ",
                        styles: [
                            "\n      .invalid-feedback,\n      .valid-feedback {\n        display: block;\n      }\n    "
                        ]
                    },] },
        ];
        /** @nocollapse */
        MessagesComponent.ctorParameters = function () {
            return [
                { type: BootstrapVersion, decorators: [{ type: i0.Inject, args: [BOOTSTRAP_VERSION,] }] }
            ];
        };
        MessagesComponent.propDecorators = {
            messages: [{ type: i0.Input }]
        };
        return MessagesComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var DEFAULT_ERRORS = [
        {
            error: "required",
            format: function (label) { return label + " is required"; }
        },
        {
            error: "pattern",
            format: function (label) { return label + " is invalid"; }
        },
        {
            error: "minlength",
            format: function (label, error) {
                return label + " must be at least " + error.requiredLength + " characters";
            }
        },
        {
            error: "maxlength",
            format: function (label, error) {
                return label + " must be no longer than " + error.requiredLength + " characters";
            }
        },
        {
            error: "requiredTrue",
            format: function (label, error) { return label + " is required"; }
        },
        {
            error: "email",
            format: function (label, error) { return "Invalid email address"; }
        },
        {
            error: "max",
            format: function (label, error) { return label + " must be no greater than " + error.max; }
        },
        {
            error: "min",
            format: function (label, error) { return label + " must be no less than " + error.min; }
        }
    ];

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var ErrorMessageService = /** @class */ (function () {
        function ErrorMessageService(customErrorMessages) {
            this.customErrorMessages = customErrorMessages;
            this.defaultErrors = DEFAULT_ERRORS;
            this.errorMessages = customErrorMessages.reduce(function (acc, cur) { return acc.concat(cur); }, this.defaultErrors);
        }
        ErrorMessageService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: "root"
                    },] },
        ];
        /** @nocollapse */
        ErrorMessageService.ctorParameters = function () {
            return [
                { type: Array, decorators: [{ type: i0.Inject, args: [CUSTOM_ERROR_MESSAGES,] }] }
            ];
        };
        /** @nocollapse */ ErrorMessageService.ngInjectableDef = i0.defineInjectable({ factory: function ErrorMessageService_Factory() { return new ErrorMessageService(i0.inject(CUSTOM_ERROR_MESSAGES)); }, token: ErrorMessageService, providedIn: "root" });
        return ErrorMessageService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var FormGroupComponent = /** @class */ (function () {
        function FormGroupComponent(elRef, errorMessageService) {
            var _this = this;
            this.elRef = elRef;
            this.errorMessageService = errorMessageService;
            this.customErrorMessages = [];
            this.validationDisabled = false;
            this.messages = function () { return _this.getMessages(); };
        }
        Object.defineProperty(FormGroupComponent.prototype, "hasErrors", {
            get: /**
             * @return {?}
             */ function () {
                return (this.FormControlNames.some(function (c) { return !c.valid && c.dirty && c.touched; }) &&
                    !this.validationDisabled);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormGroupComponent.prototype, "hasSuccess", {
            get: /**
             * @return {?}
             */ function () {
                return (!this.FormControlNames.some(function (c) { return !c.valid; }) &&
                    this.FormControlNames.some(function (c) { return c.dirty && c.touched; }) &&
                    !this.validationDisabled);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        FormGroupComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                if (this.messagesBlock) {
                    this.messagesBlock.messages = this.messages;
                }
            };
        /**
         * @return {?}
         */
        FormGroupComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.errorMessages = this.errorMessageService.errorMessages
                    .concat(this.customErrorMessages)
                    .reverse();
            };
        Object.defineProperty(FormGroupComponent.prototype, "label", {
            get: /**
             * @return {?}
             */ function () {
                /** @type {?} */
                var label = this.elRef.nativeElement.querySelector("label");
                return label && label.textContent ? label.textContent.trim() : "This field";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormGroupComponent.prototype, "isDirtyAndTouched", {
            get: /**
             * @return {?}
             */ function () {
                return this.FormControlNames.some(function (c) { return c.dirty && c.touched; });
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        FormGroupComponent.prototype.getMessages = /**
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var messages = [];
                if (!this.isDirtyAndTouched || this.validationDisabled) {
                    return messages;
                }
                /** @type {?} */
                var names = this.FormControlNames.map(function (f) { return f.name; });
                this.FormControlNames.filter(function (c, i) {
                    return !c.valid &&
                        !!c.errors &&
                        // filter out FormControlNames that share the same name - usually for radio buttons
                        names.indexOf(c.name) === i;
                }).forEach(function (control) {
                    Object.keys(control.errors).forEach(function (key) {
                        /** @type {?} */
                        var error = _this.errorMessages.find(function (err) { return err.error === key; });
                        if (!error) {
                            return;
                        }
                        messages.push(error.format(_this.label, control.errors[key]));
                    });
                });
                return messages;
            };
        FormGroupComponent.decorators = [
            { type: i0.Component, args: [{
                        // tslint:disable:component-selector
                        selector: ".form-group",
                        template: "\n    <ng-content></ng-content>\n    <bfv-messages *ngIf=\"!messagesBlock\" [messages]=\"messages\"></bfv-messages>\n  "
                    },] },
        ];
        /** @nocollapse */
        FormGroupComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: ErrorMessageService }
            ];
        };
        FormGroupComponent.propDecorators = {
            FormControlNames: [{ type: i0.ContentChildren, args: [forms.FormControlName,] }],
            customErrorMessages: [{ type: i0.Input }],
            validationDisabled: [{ type: i0.Input }],
            hasErrors: [{ type: i0.HostBinding, args: ["class.has-error",] }],
            hasSuccess: [{ type: i0.HostBinding, args: ["class.has-success",] }],
            messagesBlock: [{ type: i0.ContentChild, args: [MessagesComponent,] }]
        };
        return FormGroupComponent;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * @param {?} name
     * @param {?} parent
     * @return {?}
     */
    function controlPath(name, parent) {
        // tslint:disable-next-line:no-non-null-assertion
        return __spread(/** @type {?} */ ((parent.path)), [name]);
    }
    var FormControlDirective = /** @class */ (function () {
        function FormControlDirective(
        // this value might be null, but we union type it as such until
        // this issue is resolved: https://github.com/angular/angular/issues/25544
        parent, bootstrapVersion) {
            this.parent = parent;
            this.bootstrapVersion = bootstrapVersion;
        }
        Object.defineProperty(FormControlDirective.prototype, "validClass", {
            get: /**
             * @return {?}
             */ function () {
                if (!this.control) {
                    return false;
                }
                return (this.bootstrapFour &&
                    this.control.valid &&
                    (this.control.touched || this.control.dirty));
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormControlDirective.prototype, "invalidClass", {
            get: /**
             * @return {?}
             */ function () {
                if (!this.control) {
                    return false;
                }
                return (this.bootstrapFour &&
                    this.control.invalid &&
                    this.control.touched &&
                    this.control.dirty);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormControlDirective.prototype, "path", {
            get: /**
             * @return {?}
             */ function () {
                return controlPath(this.formControlName, this.parent);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormControlDirective.prototype, "control", {
            get: /**
             * @return {?}
             */ function () {
                return this.formDirective && this.formDirective.getControl(this);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormControlDirective.prototype, "formDirective", {
            get: /**
             * @return {?}
             */ function () {
                return this.parent ? this.parent.formDirective : null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormControlDirective.prototype, "bootstrapFour", {
            get: /**
             * @return {?}
             */ function () {
                return this.bootstrapVersion === BootstrapVersion.Four;
            },
            enumerable: true,
            configurable: true
        });
        FormControlDirective.decorators = [
            { type: i0.Directive, args: [{
                        // tslint:disable-next-line:directive-selector
                        selector: ".form-control,.form-check-input,.custom-control-input"
                    },] },
        ];
        /** @nocollapse */
        FormControlDirective.ctorParameters = function () {
            return [
                { type: forms.ControlContainer, decorators: [{ type: i0.Optional }, { type: i0.Host }, { type: i0.SkipSelf }] },
                { type: BootstrapVersion, decorators: [{ type: i0.Inject, args: [BOOTSTRAP_VERSION,] }] }
            ];
        };
        FormControlDirective.propDecorators = {
            formControlName: [{ type: i0.Input }],
            formControl: [{ type: i0.Input }],
            validClass: [{ type: i0.HostBinding, args: ["class.is-valid",] }],
            invalidClass: [{ type: i0.HostBinding, args: ["class.is-invalid",] }]
        };
        return FormControlDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NgBootstrapFormValidationModule = /** @class */ (function () {
        function NgBootstrapFormValidationModule() {
        }
        /**
         * @param {?=} userOptions
         * @return {?}
         */
        NgBootstrapFormValidationModule.forRoot = /**
         * @param {?=} userOptions
         * @return {?}
         */
            function (userOptions) {
                if (userOptions === void 0) {
                    userOptions = {
                        bootstrapVersion: BootstrapVersion.Four
                    };
                }
                return {
                    ngModule: NgBootstrapFormValidationModule,
                    providers: [
                        {
                            provide: CUSTOM_ERROR_MESSAGES,
                            useValue: userOptions.customErrorMessages || [],
                            multi: true
                        },
                        {
                            provide: BOOTSTRAP_VERSION,
                            useValue: userOptions.bootstrapVersion
                        },
                        ErrorMessageService
                    ]
                };
            };
        NgBootstrapFormValidationModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [common.CommonModule],
                        declarations: [
                            FormValidationDirective,
                            FormGroupComponent,
                            MessagesComponent,
                            FormControlDirective
                        ],
                        exports: [
                            FormValidationDirective,
                            FormGroupComponent,
                            MessagesComponent,
                            FormControlDirective
                        ]
                    },] },
        ];
        return NgBootstrapFormValidationModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    exports.FormValidationDirective = FormValidationDirective;
    exports.MessagesComponent = MessagesComponent;
    exports.FormGroupComponent = FormGroupComponent;
    exports.BootstrapVersion = BootstrapVersion;
    exports.NgBootstrapFormValidationModule = NgBootstrapFormValidationModule;
    exports.CUSTOM_ERROR_MESSAGES = CUSTOM_ERROR_MESSAGES;
    exports.BOOTSTRAP_VERSION = BOOTSTRAP_VERSION;
    exports.ɵb = FormControlDirective;
    exports.ɵa = ErrorMessageService;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctYm9vdHN0cmFwLWZvcm0tdmFsaWRhdGlvbi51bWQuanMubWFwIiwic291cmNlcyI6WyJuZzovL25nLWJvb3RzdHJhcC1mb3JtLXZhbGlkYXRpb24vbGliL0RpcmVjdGl2ZXMvZm9ybS12YWxpZGF0aW9uLmRpcmVjdGl2ZS50cyIsIm5nOi8vbmctYm9vdHN0cmFwLWZvcm0tdmFsaWRhdGlvbi9saWIvRW51bXMvQm9vdHN0cmFwVmVyc2lvbi50cyIsIm5nOi8vbmctYm9vdHN0cmFwLWZvcm0tdmFsaWRhdGlvbi9saWIvVG9rZW5zL3Rva2Vucy50cyIsIm5nOi8vbmctYm9vdHN0cmFwLWZvcm0tdmFsaWRhdGlvbi9saWIvQ29tcG9uZW50cy9tZXNzYWdlcy9tZXNzYWdlcy5jb21wb25lbnQudHMiLCJuZzovL25nLWJvb3RzdHJhcC1mb3JtLXZhbGlkYXRpb24vbGliL2RlZmF1bHQtZXJyb3JzLnRzIiwibmc6Ly9uZy1ib290c3RyYXAtZm9ybS12YWxpZGF0aW9uL2xpYi9TZXJ2aWNlcy9lcnJvci1tZXNzYWdlLnNlcnZpY2UudHMiLCJuZzovL25nLWJvb3RzdHJhcC1mb3JtLXZhbGlkYXRpb24vbGliL0NvbXBvbmVudHMvZm9ybS1ncm91cC9mb3JtLWdyb3VwLmNvbXBvbmVudC50cyIsbnVsbCwibmc6Ly9uZy1ib290c3RyYXAtZm9ybS12YWxpZGF0aW9uL2xpYi9EaXJlY3RpdmVzL2Zvcm0tY29udHJvbC5kaXJlY3RpdmUudHMiLCJuZzovL25nLWJvb3RzdHJhcC1mb3JtLXZhbGlkYXRpb24vbGliL25nLWJvb3RzdHJhcC1mb3JtLXZhbGlkYXRpb24ubW9kdWxlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIERpcmVjdGl2ZSxcbiAgRXZlbnRFbWl0dGVyLFxuICBJbnB1dCxcbiAgT3V0cHV0LFxuICBIb3N0TGlzdGVuZXJcbn0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7XG4gIEFic3RyYWN0Q29udHJvbCxcbiAgRm9ybUFycmF5LFxuICBGb3JtQ29udHJvbCxcbiAgRm9ybUdyb3VwXG59IGZyb20gXCJAYW5ndWxhci9mb3Jtc1wiO1xuXG5ARGlyZWN0aXZlKHtcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmRpcmVjdGl2ZS1zZWxlY3RvclxuICBzZWxlY3RvcjogXCJbZm9ybUdyb3VwXVwiXG59KVxuZXhwb3J0IGNsYXNzIEZvcm1WYWxpZGF0aW9uRGlyZWN0aXZlIHtcbiAgQElucHV0KClcbiAgZm9ybUdyb3VwOiBGb3JtR3JvdXA7XG4gIEBPdXRwdXQoKVxuICB2YWxpZFN1Ym1pdCA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gIEBIb3N0TGlzdGVuZXIoXCJzdWJtaXRcIilcbiAgb25TdWJtaXQoKSB7XG4gICAgdGhpcy5tYXJrQXNUb3VjaGVkQW5kRGlydHkodGhpcy5mb3JtR3JvdXApO1xuICAgIGlmICh0aGlzLmZvcm1Hcm91cC52YWxpZCkge1xuICAgICAgdGhpcy52YWxpZFN1Ym1pdC5lbWl0KHRoaXMuZm9ybUdyb3VwLnZhbHVlKTtcbiAgICB9XG4gIH1cblxuICBtYXJrQXNUb3VjaGVkQW5kRGlydHkoY29udHJvbDogQWJzdHJhY3RDb250cm9sKSB7XG4gICAgaWYgKGNvbnRyb2wgaW5zdGFuY2VvZiBGb3JtR3JvdXApIHtcbiAgICAgIE9iamVjdC5rZXlzKGNvbnRyb2wuY29udHJvbHMpLmZvckVhY2goa2V5ID0+XG4gICAgICAgIHRoaXMubWFya0FzVG91Y2hlZEFuZERpcnR5KGNvbnRyb2wuY29udHJvbHNba2V5XSlcbiAgICAgICk7XG4gICAgfSBlbHNlIGlmIChjb250cm9sIGluc3RhbmNlb2YgRm9ybUFycmF5KSB7XG4gICAgICBjb250cm9sLmNvbnRyb2xzLmZvckVhY2goYyA9PiB0aGlzLm1hcmtBc1RvdWNoZWRBbmREaXJ0eShjKSk7XG4gICAgfSBlbHNlIGlmIChjb250cm9sIGluc3RhbmNlb2YgRm9ybUNvbnRyb2wgJiYgY29udHJvbC5lbmFibGVkKSB7XG4gICAgICBjb250cm9sLm1hcmtBc0RpcnR5KCk7XG4gICAgICBjb250cm9sLm1hcmtBc1RvdWNoZWQoKTtcbiAgICAgIGNvbnRyb2wudXBkYXRlVmFsdWVBbmRWYWxpZGl0eSgpO1xuICAgIH1cbiAgfVxufVxuIiwiZXhwb3J0IGVudW0gQm9vdHN0cmFwVmVyc2lvbiB7XG4gIFRocmVlLFxuICBGb3VyXG59XG4iLCJpbXBvcnQgeyBJbmplY3Rpb25Ub2tlbiB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBCb290c3RyYXBWZXJzaW9uIH0gZnJvbSBcIi4uL0VudW1zL0Jvb3RzdHJhcFZlcnNpb25cIjtcbmltcG9ydCB7IEVycm9yTWVzc2FnZSB9IGZyb20gXCIuLi9Nb2RlbHMvZXJyb3ItbWVzc2FnZVwiO1xuXG5leHBvcnQgY29uc3QgQ1VTVE9NX0VSUk9SX01FU1NBR0VTID0gbmV3IEluamVjdGlvblRva2VuPEVycm9yTWVzc2FnZVtdPihcbiAgXCJuZy1ib290c3RyYXAtZm9ybS12YWxpZGF0aW9uIGN1c3RvbSBlcnJvciBtZXNzYWdlc1wiXG4pO1xuXG5leHBvcnQgY29uc3QgQk9PVFNUUkFQX1ZFUlNJT04gPSBuZXcgSW5qZWN0aW9uVG9rZW48Qm9vdHN0cmFwVmVyc2lvbj4oXG4gIFwibmctYm9vdHN0cmFwLWZvcm0tdmFsaWRhdGlvbiBtb2R1bGUgb3B0aW9uc1wiXG4pO1xuIiwiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgSW5qZWN0IH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IEJvb3RzdHJhcFZlcnNpb24gfSBmcm9tIFwiLi4vLi4vLi4vbGliL0VudW1zL0Jvb3RzdHJhcFZlcnNpb25cIjtcbmltcG9ydCB7IEJPT1RTVFJBUF9WRVJTSU9OIH0gZnJvbSBcIi4uLy4uL1Rva2Vucy90b2tlbnNcIjtcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiBcImJmdi1tZXNzYWdlc1wiLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxzcGFuIFtuZ0NsYXNzXT1cImNsYXNzTmFtZVwiICpuZ0Zvcj1cImxldCBtZXNzYWdlIG9mIG1lc3NhZ2VzKClcIj57e21lc3NhZ2V9fTwvc3Bhbj5cbiAgYCxcbiAgc3R5bGVzOiBbXG4gICAgYFxuICAgICAgLmludmFsaWQtZmVlZGJhY2ssXG4gICAgICAudmFsaWQtZmVlZGJhY2sge1xuICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgIH1cbiAgICBgXG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgTWVzc2FnZXNDb21wb25lbnQge1xuICBASW5wdXQoKVxuICBwdWJsaWMgbWVzc2FnZXMgPSAoKSA9PiBbXTtcblxuICBnZXQgY2xhc3NOYW1lKCkge1xuICAgIHN3aXRjaCAodGhpcy5ib290c3RyYXBWZXJzaW9uKSB7XG4gICAgICBjYXNlIEJvb3RzdHJhcFZlcnNpb24uVGhyZWU6XG4gICAgICAgIHJldHVybiBcImhlbHAtYmxvY2tcIjtcbiAgICAgIGNhc2UgQm9vdHN0cmFwVmVyc2lvbi5Gb3VyOlxuICAgICAgICByZXR1cm4gXCJpbnZhbGlkLWZlZWRiYWNrXCI7XG4gICAgfVxuICB9XG5cbiAgY29uc3RydWN0b3IoXG4gICAgQEluamVjdChCT09UU1RSQVBfVkVSU0lPTikgcHJpdmF0ZSBib290c3RyYXBWZXJzaW9uOiBCb290c3RyYXBWZXJzaW9uXG4gICkge31cbn1cbiIsImltcG9ydCB7IEVycm9yTWVzc2FnZSB9IGZyb20gXCIuL01vZGVscy9lcnJvci1tZXNzYWdlXCI7XG5cbmV4cG9ydCBjb25zdCBERUZBVUxUX0VSUk9SUzogRXJyb3JNZXNzYWdlW10gPSBbXG4gIHtcbiAgICBlcnJvcjogXCJyZXF1aXJlZFwiLFxuICAgIGZvcm1hdDogbGFiZWwgPT4gYCR7bGFiZWx9IGlzIHJlcXVpcmVkYFxuICB9LFxuICB7XG4gICAgZXJyb3I6IFwicGF0dGVyblwiLFxuICAgIGZvcm1hdDogbGFiZWwgPT4gYCR7bGFiZWx9IGlzIGludmFsaWRgXG4gIH0sXG4gIHtcbiAgICBlcnJvcjogXCJtaW5sZW5ndGhcIixcbiAgICBmb3JtYXQ6IChsYWJlbCwgZXJyb3IpID0+XG4gICAgICBgJHtsYWJlbH0gbXVzdCBiZSBhdCBsZWFzdCAke2Vycm9yLnJlcXVpcmVkTGVuZ3RofSBjaGFyYWN0ZXJzYFxuICB9LFxuICB7XG4gICAgZXJyb3I6IFwibWF4bGVuZ3RoXCIsXG4gICAgZm9ybWF0OiAobGFiZWwsIGVycm9yKSA9PlxuICAgICAgYCR7bGFiZWx9IG11c3QgYmUgbm8gbG9uZ2VyIHRoYW4gJHtlcnJvci5yZXF1aXJlZExlbmd0aH0gY2hhcmFjdGVyc2BcbiAgfSxcbiAge1xuICAgIGVycm9yOiBcInJlcXVpcmVkVHJ1ZVwiLFxuICAgIGZvcm1hdDogKGxhYmVsLCBlcnJvcikgPT4gYCR7bGFiZWx9IGlzIHJlcXVpcmVkYFxuICB9LFxuICB7XG4gICAgZXJyb3I6IFwiZW1haWxcIixcbiAgICBmb3JtYXQ6IChsYWJlbCwgZXJyb3IpID0+IGBJbnZhbGlkIGVtYWlsIGFkZHJlc3NgXG4gIH0sXG4gIHtcbiAgICBlcnJvcjogXCJtYXhcIixcbiAgICBmb3JtYXQ6IChsYWJlbCwgZXJyb3IpID0+IGAke2xhYmVsfSBtdXN0IGJlIG5vIGdyZWF0ZXIgdGhhbiAke2Vycm9yLm1heH1gXG4gIH0sXG4gIHtcbiAgICBlcnJvcjogXCJtaW5cIixcbiAgICBmb3JtYXQ6IChsYWJlbCwgZXJyb3IpID0+IGAke2xhYmVsfSBtdXN0IGJlIG5vIGxlc3MgdGhhbiAke2Vycm9yLm1pbn1gXG4gIH1cbl07XG4iLCJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3QgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgREVGQVVMVF9FUlJPUlMgfSBmcm9tIFwiLi4vZGVmYXVsdC1lcnJvcnNcIjtcbmltcG9ydCB7IENVU1RPTV9FUlJPUl9NRVNTQUdFUyB9IGZyb20gXCIuLi9Ub2tlbnMvdG9rZW5zXCI7XG5pbXBvcnQgeyBFcnJvck1lc3NhZ2UgfSBmcm9tIFwiLi4vTW9kZWxzL2Vycm9yLW1lc3NhZ2VcIjtcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiBcInJvb3RcIlxufSlcbmV4cG9ydCBjbGFzcyBFcnJvck1lc3NhZ2VTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBkZWZhdWx0RXJyb3JzID0gREVGQVVMVF9FUlJPUlM7XG5cbiAgcHVibGljIGVycm9yTWVzc2FnZXM6IEVycm9yTWVzc2FnZVtdO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIEBJbmplY3QoQ1VTVE9NX0VSUk9SX01FU1NBR0VTKSBwdWJsaWMgY3VzdG9tRXJyb3JNZXNzYWdlczogRXJyb3JNZXNzYWdlW11bXVxuICApIHtcbiAgICB0aGlzLmVycm9yTWVzc2FnZXMgPSBjdXN0b21FcnJvck1lc3NhZ2VzLnJlZHVjZShcbiAgICAgIChhY2MsIGN1cikgPT4gYWNjLmNvbmNhdChjdXIpLFxuICAgICAgdGhpcy5kZWZhdWx0RXJyb3JzXG4gICAgKTtcbiAgfVxufVxuIiwiaW1wb3J0IHtcbiAgQ29tcG9uZW50LFxuICBDb250ZW50Q2hpbGRyZW4sXG4gIENvbnRlbnRDaGlsZCxcbiAgRWxlbWVudFJlZixcbiAgSG9zdEJpbmRpbmcsXG4gIElucHV0LFxuICBRdWVyeUxpc3QsXG4gIE9uSW5pdCxcbiAgQWZ0ZXJDb250ZW50SW5pdFxufSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgRm9ybUNvbnRyb2xOYW1lIH0gZnJvbSBcIkBhbmd1bGFyL2Zvcm1zXCI7XG5pbXBvcnQgeyBFcnJvck1lc3NhZ2VTZXJ2aWNlIH0gZnJvbSBcIi4uLy4uL1NlcnZpY2VzL2Vycm9yLW1lc3NhZ2Uuc2VydmljZVwiO1xuaW1wb3J0IHsgTWVzc2FnZXNDb21wb25lbnQgfSBmcm9tIFwiLi4vbWVzc2FnZXMvbWVzc2FnZXMuY29tcG9uZW50XCI7XG5pbXBvcnQgeyBFcnJvck1lc3NhZ2UgfSBmcm9tIFwiLi4vLi4vTW9kZWxzL2Vycm9yLW1lc3NhZ2VcIjtcblxuQENvbXBvbmVudCh7XG4gIC8vIHRzbGludDpkaXNhYmxlOmNvbXBvbmVudC1zZWxlY3RvclxuICBzZWxlY3RvcjogXCIuZm9ybS1ncm91cFwiLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxuZy1jb250ZW50PjwvbmctY29udGVudD5cbiAgICA8YmZ2LW1lc3NhZ2VzICpuZ0lmPVwiIW1lc3NhZ2VzQmxvY2tcIiBbbWVzc2FnZXNdPVwibWVzc2FnZXNcIj48L2Jmdi1tZXNzYWdlcz5cbiAgYFxufSlcbmV4cG9ydCBjbGFzcyBGb3JtR3JvdXBDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIEFmdGVyQ29udGVudEluaXQge1xuICBAQ29udGVudENoaWxkcmVuKEZvcm1Db250cm9sTmFtZSlcbiAgRm9ybUNvbnRyb2xOYW1lczogUXVlcnlMaXN0PEZvcm1Db250cm9sTmFtZT47XG5cbiAgQElucHV0KClcbiAgY3VzdG9tRXJyb3JNZXNzYWdlczogRXJyb3JNZXNzYWdlW10gPSBbXTtcblxuICBASW5wdXQoKVxuICB2YWxpZGF0aW9uRGlzYWJsZWQgPSBmYWxzZTtcblxuICBASG9zdEJpbmRpbmcoXCJjbGFzcy5oYXMtZXJyb3JcIilcbiAgZ2V0IGhhc0Vycm9ycygpIHtcbiAgICByZXR1cm4gKFxuICAgICAgdGhpcy5Gb3JtQ29udHJvbE5hbWVzLnNvbWUoYyA9PiAhYy52YWxpZCAmJiBjLmRpcnR5ICYmIGMudG91Y2hlZCkgJiZcbiAgICAgICF0aGlzLnZhbGlkYXRpb25EaXNhYmxlZFxuICAgICk7XG4gIH1cblxuICBASG9zdEJpbmRpbmcoXCJjbGFzcy5oYXMtc3VjY2Vzc1wiKVxuICBnZXQgaGFzU3VjY2VzcygpIHtcbiAgICByZXR1cm4gKFxuICAgICAgIXRoaXMuRm9ybUNvbnRyb2xOYW1lcy5zb21lKGMgPT4gIWMudmFsaWQpICYmXG4gICAgICB0aGlzLkZvcm1Db250cm9sTmFtZXMuc29tZShjID0+IGMuZGlydHkgJiYgYy50b3VjaGVkKSAmJlxuICAgICAgIXRoaXMudmFsaWRhdGlvbkRpc2FibGVkXG4gICAgKTtcbiAgfVxuXG4gIEBDb250ZW50Q2hpbGQoTWVzc2FnZXNDb21wb25lbnQpXG4gIHB1YmxpYyBtZXNzYWdlc0Jsb2NrOiBNZXNzYWdlc0NvbXBvbmVudDtcblxuICBwcml2YXRlIGVycm9yTWVzc2FnZXM6IEVycm9yTWVzc2FnZVtdO1xuXG4gIHB1YmxpYyBtZXNzYWdlcyA9ICgpID0+IHRoaXMuZ2V0TWVzc2FnZXMoKTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGVsUmVmOiBFbGVtZW50UmVmLFxuICAgIHByaXZhdGUgZXJyb3JNZXNzYWdlU2VydmljZTogRXJyb3JNZXNzYWdlU2VydmljZVxuICApIHt9XG5cbiAgbmdBZnRlckNvbnRlbnRJbml0KCkge1xuICAgIGlmICh0aGlzLm1lc3NhZ2VzQmxvY2spIHtcbiAgICAgIHRoaXMubWVzc2FnZXNCbG9jay5tZXNzYWdlcyA9IHRoaXMubWVzc2FnZXM7XG4gICAgfVxuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5lcnJvck1lc3NhZ2VzID0gdGhpcy5lcnJvck1lc3NhZ2VTZXJ2aWNlLmVycm9yTWVzc2FnZXNcbiAgICAgIC5jb25jYXQodGhpcy5jdXN0b21FcnJvck1lc3NhZ2VzKVxuICAgICAgLnJldmVyc2UoKTtcbiAgfVxuXG4gIGdldCBsYWJlbCgpIHtcbiAgICBjb25zdCBsYWJlbCA9IHRoaXMuZWxSZWYubmF0aXZlRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwibGFiZWxcIik7XG4gICAgcmV0dXJuIGxhYmVsICYmIGxhYmVsLnRleHRDb250ZW50ID8gbGFiZWwudGV4dENvbnRlbnQudHJpbSgpIDogXCJUaGlzIGZpZWxkXCI7XG4gIH1cblxuICBnZXQgaXNEaXJ0eUFuZFRvdWNoZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuRm9ybUNvbnRyb2xOYW1lcy5zb21lKGMgPT4gYy5kaXJ0eSAmJiBjLnRvdWNoZWQpO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRNZXNzYWdlcygpOiBzdHJpbmdbXSB7XG4gICAgY29uc3QgbWVzc2FnZXMgPSBbXTtcbiAgICBpZiAoIXRoaXMuaXNEaXJ0eUFuZFRvdWNoZWQgfHwgdGhpcy52YWxpZGF0aW9uRGlzYWJsZWQpIHtcbiAgICAgIHJldHVybiBtZXNzYWdlcztcbiAgICB9XG5cbiAgICBjb25zdCBuYW1lcyA9IHRoaXMuRm9ybUNvbnRyb2xOYW1lcy5tYXAoZiA9PiBmLm5hbWUpO1xuXG4gICAgdGhpcy5Gb3JtQ29udHJvbE5hbWVzLmZpbHRlcihcbiAgICAgIChjLCBpKSA9PlxuICAgICAgICAhYy52YWxpZCAmJlxuICAgICAgICAhIWMuZXJyb3JzICYmXG4gICAgICAgIC8vIGZpbHRlciBvdXQgRm9ybUNvbnRyb2xOYW1lcyB0aGF0IHNoYXJlIHRoZSBzYW1lIG5hbWUgLSB1c3VhbGx5IGZvciByYWRpbyBidXR0b25zXG4gICAgICAgIG5hbWVzLmluZGV4T2YoYy5uYW1lKSA9PT0gaVxuICAgICkuZm9yRWFjaChjb250cm9sID0+IHtcbiAgICAgIE9iamVjdC5rZXlzKGNvbnRyb2wuZXJyb3JzKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgIGNvbnN0IGVycm9yID0gdGhpcy5lcnJvck1lc3NhZ2VzLmZpbmQoZXJyID0+IGVyci5lcnJvciA9PT0ga2V5KTtcbiAgICAgICAgaWYgKCFlcnJvcikge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBtZXNzYWdlcy5wdXNoKGVycm9yLmZvcm1hdCh0aGlzLmxhYmVsLCBjb250cm9sLmVycm9yc1trZXldKSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHJldHVybiBtZXNzYWdlcztcbiAgfVxufVxuIiwiLyohICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbkNvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2VcclxudGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGVcclxuTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuXHJcblRISVMgQ09ERSBJUyBQUk9WSURFRCBPTiBBTiAqQVMgSVMqIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcclxuS0lORCwgRUlUSEVSIEVYUFJFU1MgT1IgSU1QTElFRCwgSU5DTFVESU5HIFdJVEhPVVQgTElNSVRBVElPTiBBTlkgSU1QTElFRFxyXG5XQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgVElUTEUsIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLFxyXG5NRVJDSEFOVEFCTElUWSBPUiBOT04tSU5GUklOR0VNRU5ULlxyXG5cclxuU2VlIHRoZSBBcGFjaGUgVmVyc2lvbiAyLjAgTGljZW5zZSBmb3Igc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zXHJcbmFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cclxuLyogZ2xvYmFsIFJlZmxlY3QsIFByb21pc2UgKi9cclxuXHJcbnZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24oZCwgYikge1xyXG4gICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxyXG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcclxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcclxuICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZXh0ZW5kcyhkLCBiKSB7XHJcbiAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbn1cclxuXHJcbmV4cG9ydCB2YXIgX19hc3NpZ24gPSBmdW5jdGlvbigpIHtcclxuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiBfX2Fzc2lnbih0KSB7XHJcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XHJcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSkgdFtwXSA9IHNbcF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3Jlc3QocywgZSkge1xyXG4gICAgdmFyIHQgPSB7fTtcclxuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxyXG4gICAgICAgIHRbcF0gPSBzW3BdO1xyXG4gICAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIGlmIChlLmluZGV4T2YocFtpXSkgPCAwKVxyXG4gICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcclxuICAgIHJldHVybiB0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xyXG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XHJcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xyXG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcGFyYW0ocGFyYW1JbmRleCwgZGVjb3JhdG9yKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7IGRlY29yYXRvcih0YXJnZXQsIGtleSwgcGFyYW1JbmRleCk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fbWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0ZXIodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHJlc3VsdC52YWx1ZSk7IH0pLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZ2VuZXJhdG9yKHRoaXNBcmcsIGJvZHkpIHtcclxuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XHJcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xyXG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcclxuICAgICAgICB3aGlsZSAoXykgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xyXG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XHJcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxyXG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19leHBvcnRTdGFyKG0sIGV4cG9ydHMpIHtcclxuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKCFleHBvcnRzLmhhc093blByb3BlcnR5KHApKSBleHBvcnRzW3BdID0gbVtwXTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fdmFsdWVzKG8pIHtcclxuICAgIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXSwgaSA9IDA7XHJcbiAgICBpZiAobSkgcmV0dXJuIG0uY2FsbChvKTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAobyAmJiBpID49IG8ubGVuZ3RoKSBvID0gdm9pZCAwO1xyXG4gICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogbyAmJiBvW2krK10sIGRvbmU6ICFvIH07XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVhZChvLCBuKSB7XHJcbiAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl07XHJcbiAgICBpZiAoIW0pIHJldHVybiBvO1xyXG4gICAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGVycm9yKSB7IGUgPSB7IGVycm9yOiBlcnJvciB9OyB9XHJcbiAgICBmaW5hbGx5IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBpZiAociAmJiAhci5kb25lICYmIChtID0gaVtcInJldHVyblwiXSkpIG0uY2FsbChpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZCgpIHtcclxuICAgIGZvciAodmFyIGFyID0gW10sIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKVxyXG4gICAgICAgIGFyID0gYXIuY29uY2F0KF9fcmVhZChhcmd1bWVudHNbaV0pKTtcclxuICAgIHJldHVybiBhcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXdhaXQodikge1xyXG4gICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBfX2F3YWl0ID8gKHRoaXMudiA9IHYsIHRoaXMpIDogbmV3IF9fYXdhaXQodik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jR2VuZXJhdG9yKHRoaXNBcmcsIF9hcmd1bWVudHMsIGdlbmVyYXRvcikge1xyXG4gICAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxuICAgIHZhciBnID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pLCBpLCBxID0gW107XHJcbiAgICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgaWYgKGdbbl0pIGlbbl0gPSBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKGEsIGIpIHsgcS5wdXNoKFtuLCB2LCBhLCBiXSkgPiAxIHx8IHJlc3VtZShuLCB2KTsgfSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHJlc3VtZShuLCB2KSB7IHRyeSB7IHN0ZXAoZ1tuXSh2KSk7IH0gY2F0Y2ggKGUpIHsgc2V0dGxlKHFbMF1bM10sIGUpOyB9IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAocikgeyByLnZhbHVlIGluc3RhbmNlb2YgX19hd2FpdCA/IFByb21pc2UucmVzb2x2ZShyLnZhbHVlLnYpLnRoZW4oZnVsZmlsbCwgcmVqZWN0KSA6IHNldHRsZShxWzBdWzJdLCByKTsgfVxyXG4gICAgZnVuY3Rpb24gZnVsZmlsbCh2YWx1ZSkgeyByZXN1bWUoXCJuZXh0XCIsIHZhbHVlKTsgfVxyXG4gICAgZnVuY3Rpb24gcmVqZWN0KHZhbHVlKSB7IHJlc3VtZShcInRocm93XCIsIHZhbHVlKTsgfVxyXG4gICAgZnVuY3Rpb24gc2V0dGxlKGYsIHYpIHsgaWYgKGYodiksIHEuc2hpZnQoKSwgcS5sZW5ndGgpIHJlc3VtZShxWzBdWzBdLCBxWzBdWzFdKTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0RlbGVnYXRvcihvKSB7XHJcbiAgICB2YXIgaSwgcDtcclxuICAgIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiwgZnVuY3Rpb24gKGUpIHsgdGhyb3cgZTsgfSksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4sIGYpIHsgaVtuXSA9IG9bbl0gPyBmdW5jdGlvbiAodikgeyByZXR1cm4gKHAgPSAhcCkgPyB7IHZhbHVlOiBfX2F3YWl0KG9bbl0odikpLCBkb25lOiBuID09PSBcInJldHVyblwiIH0gOiBmID8gZih2KSA6IHY7IH0gOiBmOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jVmFsdWVzKG8pIHtcclxuICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbiAgICB2YXIgbSA9IG9bU3ltYm9sLmFzeW5jSXRlcmF0b3JdLCBpO1xyXG4gICAgcmV0dXJuIG0gPyBtLmNhbGwobykgOiAobyA9IHR5cGVvZiBfX3ZhbHVlcyA9PT0gXCJmdW5jdGlvblwiID8gX192YWx1ZXMobykgOiBvW1N5bWJvbC5pdGVyYXRvcl0oKSwgaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGkpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IGlbbl0gPSBvW25dICYmIGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IHYgPSBvW25dKHYpLCBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCB2LmRvbmUsIHYudmFsdWUpOyB9KTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgZCwgdikgeyBQcm9taXNlLnJlc29sdmUodikudGhlbihmdW5jdGlvbih2KSB7IHJlc29sdmUoeyB2YWx1ZTogdiwgZG9uZTogZCB9KTsgfSwgcmVqZWN0KTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19tYWtlVGVtcGxhdGVPYmplY3QoY29va2VkLCByYXcpIHtcclxuICAgIGlmIChPYmplY3QuZGVmaW5lUHJvcGVydHkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNvb2tlZCwgXCJyYXdcIiwgeyB2YWx1ZTogcmF3IH0pOyB9IGVsc2UgeyBjb29rZWQucmF3ID0gcmF3OyB9XHJcbiAgICByZXR1cm4gY29va2VkO1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9faW1wb3J0U3Rhcihtb2QpIHtcclxuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XHJcbiAgICB2YXIgcmVzdWx0ID0ge307XHJcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgcmVzdWx0W2tdID0gbW9kW2tdO1xyXG4gICAgcmVzdWx0LmRlZmF1bHQgPSBtb2Q7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnREZWZhdWx0KG1vZCkge1xyXG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBkZWZhdWx0OiBtb2QgfTtcclxufVxyXG4iLCJpbXBvcnQge1xuICBEaXJlY3RpdmUsXG4gIElucHV0LFxuICBIb3N0QmluZGluZyxcbiAgT3B0aW9uYWwsXG4gIEhvc3QsXG4gIFNraXBTZWxmLFxuICBJbmplY3Rcbn0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IENvbnRyb2xDb250YWluZXIsIEZvcm1Db250cm9sIH0gZnJvbSBcIkBhbmd1bGFyL2Zvcm1zXCI7XG5pbXBvcnQgeyBCb290c3RyYXBWZXJzaW9uIH0gZnJvbSBcIi4uL0VudW1zL0Jvb3RzdHJhcFZlcnNpb25cIjtcbmltcG9ydCB7IEJPT1RTVFJBUF9WRVJTSU9OIH0gZnJvbSBcIi4uL1Rva2Vucy90b2tlbnNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGNvbnRyb2xQYXRoKG5hbWU6IHN0cmluZywgcGFyZW50OiBDb250cm9sQ29udGFpbmVyKTogc3RyaW5nW10ge1xuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tbm9uLW51bGwtYXNzZXJ0aW9uXG4gIHJldHVybiBbLi4ucGFyZW50LnBhdGghLCBuYW1lXTtcbn1cblxuQERpcmVjdGl2ZSh7XG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpkaXJlY3RpdmUtc2VsZWN0b3JcbiAgc2VsZWN0b3I6IFwiLmZvcm0tY29udHJvbCwuZm9ybS1jaGVjay1pbnB1dCwuY3VzdG9tLWNvbnRyb2wtaW5wdXRcIlxufSlcbmV4cG9ydCBjbGFzcyBGb3JtQ29udHJvbERpcmVjdGl2ZSB7XG4gIEBJbnB1dCgpXG4gIGZvcm1Db250cm9sTmFtZTogc3RyaW5nO1xuICBASW5wdXQoKVxuICBmb3JtQ29udHJvbDogc3RyaW5nO1xuXG4gIEBIb3N0QmluZGluZyhcImNsYXNzLmlzLXZhbGlkXCIpXG4gIGdldCB2YWxpZENsYXNzKCkge1xuICAgIGlmICghdGhpcy5jb250cm9sKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiAoXG4gICAgICB0aGlzLmJvb3RzdHJhcEZvdXIgJiZcbiAgICAgIHRoaXMuY29udHJvbC52YWxpZCAmJlxuICAgICAgKHRoaXMuY29udHJvbC50b3VjaGVkIHx8IHRoaXMuY29udHJvbC5kaXJ0eSlcbiAgICApO1xuICB9XG5cbiAgQEhvc3RCaW5kaW5nKFwiY2xhc3MuaXMtaW52YWxpZFwiKVxuICBnZXQgaW52YWxpZENsYXNzKCkge1xuICAgIGlmICghdGhpcy5jb250cm9sKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiAoXG4gICAgICB0aGlzLmJvb3RzdHJhcEZvdXIgJiZcbiAgICAgIHRoaXMuY29udHJvbC5pbnZhbGlkICYmXG4gICAgICB0aGlzLmNvbnRyb2wudG91Y2hlZCAmJlxuICAgICAgdGhpcy5jb250cm9sLmRpcnR5XG4gICAgKTtcbiAgfVxuXG4gIGdldCBwYXRoKCkge1xuICAgIHJldHVybiBjb250cm9sUGF0aCh0aGlzLmZvcm1Db250cm9sTmFtZSwgdGhpcy5wYXJlbnQpO1xuICB9XG5cbiAgZ2V0IGNvbnRyb2woKTogRm9ybUNvbnRyb2wge1xuICAgIHJldHVybiB0aGlzLmZvcm1EaXJlY3RpdmUgJiYgdGhpcy5mb3JtRGlyZWN0aXZlLmdldENvbnRyb2wodGhpcyk7XG4gIH1cblxuICBnZXQgZm9ybURpcmVjdGl2ZSgpOiBhbnkge1xuICAgIHJldHVybiB0aGlzLnBhcmVudCA/IHRoaXMucGFyZW50LmZvcm1EaXJlY3RpdmUgOiBudWxsO1xuICB9XG5cbiAgZ2V0IGJvb3RzdHJhcEZvdXIoKSB7XG4gICAgcmV0dXJuIHRoaXMuYm9vdHN0cmFwVmVyc2lvbiA9PT0gQm9vdHN0cmFwVmVyc2lvbi5Gb3VyO1xuICB9XG5cbiAgY29uc3RydWN0b3IoXG4gICAgLy8gdGhpcyB2YWx1ZSBtaWdodCBiZSBudWxsLCBidXQgd2UgdW5pb24gdHlwZSBpdCBhcyBzdWNoIHVudGlsXG4gICAgLy8gdGhpcyBpc3N1ZSBpcyByZXNvbHZlZDogaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci9pc3N1ZXMvMjU1NDRcbiAgICBAT3B0aW9uYWwoKVxuICAgIEBIb3N0KClcbiAgICBAU2tpcFNlbGYoKVxuICAgIHByaXZhdGUgcGFyZW50OiBDb250cm9sQ29udGFpbmVyLFxuICAgIEBJbmplY3QoQk9PVFNUUkFQX1ZFUlNJT04pIHByaXZhdGUgYm9vdHN0cmFwVmVyc2lvbjogQm9vdHN0cmFwVmVyc2lvblxuICApIHt9XG59XG4iLCJpbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tIFwiQGFuZ3VsYXIvY29tbW9uXCI7XG5pbXBvcnQgeyBOZ01vZHVsZSwgTW9kdWxlV2l0aFByb3ZpZGVycyB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBGb3JtVmFsaWRhdGlvbkRpcmVjdGl2ZSB9IGZyb20gXCIuL0RpcmVjdGl2ZXMvZm9ybS12YWxpZGF0aW9uLmRpcmVjdGl2ZVwiO1xuaW1wb3J0IHsgTWVzc2FnZXNDb21wb25lbnQgfSBmcm9tIFwiLi9Db21wb25lbnRzL21lc3NhZ2VzL21lc3NhZ2VzLmNvbXBvbmVudFwiO1xuaW1wb3J0IHsgRXJyb3JNZXNzYWdlU2VydmljZSB9IGZyb20gXCIuL1NlcnZpY2VzL2Vycm9yLW1lc3NhZ2Uuc2VydmljZVwiO1xuaW1wb3J0IHsgQ1VTVE9NX0VSUk9SX01FU1NBR0VTLCBCT09UU1RSQVBfVkVSU0lPTiB9IGZyb20gXCIuL1Rva2Vucy90b2tlbnNcIjtcbmltcG9ydCB7IEJvb3RzdHJhcFZlcnNpb24gfSBmcm9tIFwiLi9FbnVtcy9Cb290c3RyYXBWZXJzaW9uXCI7XG5pbXBvcnQgeyBGb3JtR3JvdXBDb21wb25lbnQgfSBmcm9tIFwiLi9Db21wb25lbnRzL2Zvcm0tZ3JvdXAvZm9ybS1ncm91cC5jb21wb25lbnRcIjtcbmltcG9ydCB7IE5nQm9vdHN0cmFwRm9ybVZhbGlkYXRpb25Nb2R1bGVPcHRpb25zIH0gZnJvbSBcIi4vTW9kZWxzL05nQm9vdHN0cmFwRm9ybVZhbGlkYXRpb25Nb2R1bGVPcHRpb25zXCI7XG5pbXBvcnQgeyBGb3JtQ29udHJvbERpcmVjdGl2ZSB9IGZyb20gXCIuL0RpcmVjdGl2ZXMvZm9ybS1jb250cm9sLmRpcmVjdGl2ZVwiO1xuXG5ATmdNb2R1bGUoe1xuICBpbXBvcnRzOiBbQ29tbW9uTW9kdWxlXSxcbiAgZGVjbGFyYXRpb25zOiBbXG4gICAgRm9ybVZhbGlkYXRpb25EaXJlY3RpdmUsXG4gICAgRm9ybUdyb3VwQ29tcG9uZW50LFxuICAgIE1lc3NhZ2VzQ29tcG9uZW50LFxuICAgIEZvcm1Db250cm9sRGlyZWN0aXZlXG4gIF0sXG4gIGV4cG9ydHM6IFtcbiAgICBGb3JtVmFsaWRhdGlvbkRpcmVjdGl2ZSxcbiAgICBGb3JtR3JvdXBDb21wb25lbnQsXG4gICAgTWVzc2FnZXNDb21wb25lbnQsXG4gICAgRm9ybUNvbnRyb2xEaXJlY3RpdmVcbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBOZ0Jvb3RzdHJhcEZvcm1WYWxpZGF0aW9uTW9kdWxlIHtcbiAgc3RhdGljIGZvclJvb3QoXG4gICAgdXNlck9wdGlvbnM6IE5nQm9vdHN0cmFwRm9ybVZhbGlkYXRpb25Nb2R1bGVPcHRpb25zID0ge1xuICAgICAgYm9vdHN0cmFwVmVyc2lvbjogQm9vdHN0cmFwVmVyc2lvbi5Gb3VyXG4gICAgfVxuICApOiBNb2R1bGVXaXRoUHJvdmlkZXJzIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmdNb2R1bGU6IE5nQm9vdHN0cmFwRm9ybVZhbGlkYXRpb25Nb2R1bGUsXG4gICAgICBwcm92aWRlcnM6IFtcbiAgICAgICAge1xuICAgICAgICAgIHByb3ZpZGU6IENVU1RPTV9FUlJPUl9NRVNTQUdFUyxcbiAgICAgICAgICB1c2VWYWx1ZTogdXNlck9wdGlvbnMuY3VzdG9tRXJyb3JNZXNzYWdlcyB8fCBbXSxcbiAgICAgICAgICBtdWx0aTogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcHJvdmlkZTogQk9PVFNUUkFQX1ZFUlNJT04sXG4gICAgICAgICAgdXNlVmFsdWU6IHVzZXJPcHRpb25zLmJvb3RzdHJhcFZlcnNpb25cbiAgICAgICAgfSxcbiAgICAgICAgRXJyb3JNZXNzYWdlU2VydmljZVxuICAgICAgXVxuICAgIH07XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJFdmVudEVtaXR0ZXIiLCJGb3JtR3JvdXAiLCJGb3JtQXJyYXkiLCJGb3JtQ29udHJvbCIsIkRpcmVjdGl2ZSIsIklucHV0IiwiT3V0cHV0IiwiSG9zdExpc3RlbmVyIiwiSW5qZWN0aW9uVG9rZW4iLCJDb21wb25lbnQiLCJJbmplY3QiLCJJbmplY3RhYmxlIiwiRWxlbWVudFJlZiIsIkNvbnRlbnRDaGlsZHJlbiIsIkZvcm1Db250cm9sTmFtZSIsIkhvc3RCaW5kaW5nIiwiQ29udGVudENoaWxkIiwiQ29udHJvbENvbnRhaW5lciIsIk9wdGlvbmFsIiwiSG9zdCIsIlNraXBTZWxmIiwiTmdNb2R1bGUiLCJDb21tb25Nb2R1bGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTs7WUFxQkUsbUJBQ2MsSUFBSUEsZUFBWSxFQUFPLENBQUM7Ozs7O1FBR3RDLDBDQUFROzs7WUFEUjtnQkFFRSxJQUFJLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO2dCQUMzQyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFO29CQUN4QixJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO2lCQUM3QzthQUNGOzs7OztR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