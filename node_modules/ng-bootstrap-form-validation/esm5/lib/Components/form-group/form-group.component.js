/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, ContentChildren, ContentChild, ElementRef, HostBinding, Input, QueryList } from "@angular/core";
import { FormControlName } from "@angular/forms";
import { ErrorMessageService } from "../../Services/error-message.service";
import { MessagesComponent } from "../messages/messages.component";
var FormGroupComponent = /** @class */ (function () {
    function FormGroupComponent(elRef, errorMessageService) {
        var _this = this;
        this.elRef = elRef;
        this.errorMessageService = errorMessageService;
        this.customErrorMessages = [];
        this.validationDisabled = false;
        this.messages = function () { return _this.getMessages(); };
    }
    Object.defineProperty(FormGroupComponent.prototype, "hasErrors", {
        get: /**
         * @return {?}
         */
        function () {
            return (this.FormControlNames.some(function (c) { return !c.valid && c.dirty && c.touched; }) &&
                !this.validationDisabled);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormGroupComponent.prototype, "hasSuccess", {
        get: /**
         * @return {?}
         */
        function () {
            return (!this.FormControlNames.some(function (c) { return !c.valid; }) &&
                this.FormControlNames.some(function (c) { return c.dirty && c.touched; }) &&
                !this.validationDisabled);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    FormGroupComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        if (this.messagesBlock) {
            this.messagesBlock.messages = this.messages;
        }
    };
    /**
     * @return {?}
     */
    FormGroupComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.errorMessages = this.errorMessageService.errorMessages
            .concat(this.customErrorMessages)
            .reverse();
    };
    Object.defineProperty(FormGroupComponent.prototype, "label", {
        get: /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var label = this.elRef.nativeElement.querySelector("label");
            return label && label.textContent ? label.textContent.trim() : "This field";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormGroupComponent.prototype, "isDirtyAndTouched", {
        get: /**
         * @return {?}
         */
        function () {
            return this.FormControlNames.some(function (c) { return c.dirty && c.touched; });
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    FormGroupComponent.prototype.getMessages = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var messages = [];
        if (!this.isDirtyAndTouched || this.validationDisabled) {
            return messages;
        }
        /** @type {?} */
        var names = this.FormControlNames.map(function (f) { return f.name; });
        this.FormControlNames.filter(function (c, i) {
            return !c.valid &&
                !!c.errors &&
                // filter out FormControlNames that share the same name - usually for radio buttons
                names.indexOf(c.name) === i;
        }).forEach(function (control) {
            Object.keys(control.errors).forEach(function (key) {
                /** @type {?} */
                var error = _this.errorMessages.find(function (err) { return err.error === key; });
                if (!error) {
                    return;
                }
                messages.push(error.format(_this.label, control.errors[key]));
            });
        });
        return messages;
    };
    FormGroupComponent.decorators = [
        { type: Component, args: [{
                    // tslint:disable:component-selector
                    selector: ".form-group",
                    template: "\n    <ng-content></ng-content>\n    <bfv-messages *ngIf=\"!messagesBlock\" [messages]=\"messages\"></bfv-messages>\n  "
                },] },
    ];
    /** @nocollapse */
    FormGroupComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ErrorMessageService }
    ]; };
    FormGroupComponent.propDecorators = {
        FormControlNames: [{ type: ContentChildren, args: [FormControlName,] }],
        customErrorMessages: [{ type: Input }],
        validationDisabled: [{ type: Input }],
        hasErrors: [{ type: HostBinding, args: ["class.has-error",] }],
        hasSuccess: [{ type: HostBinding, args: ["class.has-success",] }],
        messagesBlock: [{ type: ContentChild, args: [MessagesComponent,] }]
    };
    return FormGroupComponent;
}());
export { FormGroupComponent };
if (false) {
    /** @type {?} */
    FormGroupComponent.prototype.FormControlNames;
    /** @type {?} */
    FormGroupComponent.prototype.customErrorMessages;
    /** @type {?} */
    FormGroupComponent.prototype.validationDisabled;
    /** @type {?} */
    FormGroupComponent.prototype.messagesBlock;
    /** @type {?} */
    FormGroupComponent.prototype.errorMessages;
    /** @type {?} */
    FormGroupComponent.prototype.messages;
    /** @type {?} */
    FormGroupComponent.prototype.elRef;
    /** @type {?} */
    FormGroupComponent.prototype.errorMessageService;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1ncm91cC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy1ib290c3RyYXAtZm9ybS12YWxpZGF0aW9uLyIsInNvdXJjZXMiOlsibGliL0NvbXBvbmVudHMvZm9ybS1ncm91cC9mb3JtLWdyb3VwLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxlQUFlLEVBQ2YsWUFBWSxFQUNaLFVBQVUsRUFDVixXQUFXLEVBQ1gsS0FBSyxFQUNMLFNBQVMsRUFHVixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDakQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFDM0UsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7O0lBNkNqRSw0QkFDVSxPQUNBO1FBRlYsaUJBR0k7UUFGTSxVQUFLLEdBQUwsS0FBSztRQUNMLHdCQUFtQixHQUFuQixtQkFBbUI7UUFoQzdCLDJCQUNzQyxFQUFFLENBQUM7UUFFekMsMEJBQ3FCLEtBQUssQ0FBQzt3QkF3QlQsY0FBTSxPQUFBLEtBQUksQ0FBQyxXQUFXLEVBQUUsRUFBbEIsQ0FBa0I7S0FLdEM7SUEzQkosc0JBQ0kseUNBQVM7Ozs7UUFEYjtZQUVFLE9BQU8sQ0FDTCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyxDQUFDLENBQUMsS0FBSyxJQUFJLENBQUMsQ0FBQyxLQUFLLElBQUksQ0FBQyxDQUFDLE9BQU8sRUFBaEMsQ0FBZ0MsQ0FBQztnQkFDakUsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQ3pCLENBQUM7U0FDSDs7O09BQUE7SUFFRCxzQkFDSSwwQ0FBVTs7OztRQURkO1lBRUUsT0FBTyxDQUNMLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxVQUFB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UUgsbUJBQW1COzs7bUNBYXpCLGVBQWUsU0FBQyxlQUFlO3NDQUcvQixLQUFLO3FDQUdMLEtBQUs7NEJBR0wsV0FBVyxTQUFDLGlCQUFpQjs2QkFRN0IsV0FBVyxTQUFDLG1CQUFtQjtnQ0FTL0IsWUFBWSxTQUFDLGlCQUFpQjs7NkJBbkRqQzs7U0F3QmEsa0JBQWtCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ29tcG9uZW50LFxuICBDb250ZW50Q2hpbGRyZW4sXG4gIENvbnRlbnRDaGlsZCxcbiAgRWxlbWVudFJlZixcbiAgSG9zdEJpbmRpbmcsXG4gIElucHV0LFxuICBRdWVyeUxpc3QsXG4gIE9uSW5pdCxcbiAgQWZ0ZXJDb250ZW50SW5pdFxufSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgRm9ybUNvbnRyb2xOYW1lIH0gZnJvbSBcIkBhbmd1bGFyL2Zvcm1zXCI7XG5pbXBvcnQgeyBFcnJvck1lc3NhZ2VTZXJ2aWNlIH0gZnJvbSBcIi4uLy4uL1NlcnZpY2VzL2Vycm9yLW1lc3NhZ2Uuc2VydmljZVwiO1xuaW1wb3J0IHsgTWVzc2FnZXNDb21wb25lbnQgfSBmcm9tIFwiLi4vbWVzc2FnZXMvbWVzc2FnZXMuY29tcG9uZW50XCI7XG5pbXBvcnQgeyBFcnJvck1lc3NhZ2UgfSBmcm9tIFwiLi4vLi4vTW9kZWxzL2Vycm9yLW1lc3NhZ2VcIjtcblxuQENvbXBvbmVudCh7XG4gIC8vIHRzbGludDpkaXNhYmxlOmNvbXBvbmVudC1zZWxlY3RvclxuICBzZWxlY3RvcjogXCIuZm9ybS1ncm91cFwiLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxuZy1jb250ZW50PjwvbmctY29udGVudD5cbiAgICA8YmZ2LW1lc3NhZ2VzICpuZ0lmPVwiIW1lc3NhZ2VzQmxvY2tcIiBbbWVzc2FnZXNdPVwibWVzc2FnZXNcIj48L2Jmdi1tZXNzYWdlcz5cbiAgYFxufSlcbmV4cG9ydCBjbGFzcyBGb3JtR3JvdXBDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIEFmdGVyQ29udGVudEluaXQge1xuICBAQ29udGVudENoaWxkcmVuKEZvcm1Db250cm9sTmFtZSlcbiAgRm9ybUNvbnRyb2xOYW1lczogUXVlcnlMaXN0PEZvcm1Db250cm9sTmFtZT47XG5cbiAgQElucHV0KClcbiAgY3VzdG9tRXJyb3JNZXNzYWdlczogRXJyb3JNZXNzYWdlW10gPSBbXTtcblxuICBASW5wdXQoKVxuICB2YWxpZGF0aW9uRGlzYWJsZWQgPSBmYWxzZTtcblxuICBASG9zdEJpbmRpbmcoXCJjbGFzcy5oYXMtZXJyb3JcIilcbiAgZ2V0IGhhc0Vycm9ycygpIHtcbiAgICByZXR1cm4gKFxuICAgICAgdGhpcy5Gb3JtQ29udHJvbE5hbWVzLnNvbWUoYyA9PiAhYy52YWxpZCAmJiBjLmRpcnR5ICYmIGMudG91Y2hlZCkgJiZcbiAgICAgICF0aGlzLnZhbGlkYXRpb25EaXNhYmxlZFxuICAgICk7XG4gIH1cblxuICBASG9zdEJpbmRpbmcoXCJjbGFzcy5oYXMtc3VjY2Vzc1wiKVxuICBnZXQgaGFzU3VjY2VzcygpIHtcbiAgICByZXR1cm4gKFxuICAgICAgIXRoaXMuRm9ybUNvbnRyb2xOYW1lcy5zb21lKGMgPT4gIWMudmFsaWQpICYmXG4gICAgICB0aGlzLkZvcm1Db250cm9sTmFtZXMuc29tZShjID0+IGMuZGlydHkgJiYgYy50b3VjaGVkKSAmJlxuICAgICAgIXRoaXMudmFsaWRhdGlvbkRpc2FibGVkXG4gICAgKTtcbiAgfVxuXG4gIEBDb250ZW50Q2hpbGQoTWVzc2FnZXNDb21wb25lbnQpXG4gIHB1YmxpYyBtZXNzYWdlc0Jsb2NrOiBNZXNzYWdlc0NvbXBvbmVudDtcblxuICBwcml2YXRlIGVycm9yTWVzc2FnZXM6IEVycm9yTWVzc2FnZVtdO1xuXG4gIHB1YmxpYyBtZXNzYWdlcyA9ICgpID0+IHRoaXMuZ2V0TWVzc2FnZXMoKTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGVsUmVmOiBFbGVtZW50UmVmLFxuICAgIHByaXZhdGUgZXJyb3JNZXNzYWdlU2VydmljZTogRXJyb3JNZXNzYWdlU2VydmljZVxuICApIHt9XG5cbiAgbmdBZnRlckNvbnRlbnRJbml0KCkge1xuICAgIGlmICh0aGlzLm1lc3NhZ2VzQmxvY2spIHtcbiAgICAgIHRoaXMubWVzc2FnZXNCbG9jay5tZXNzYWdlcyA9IHRoaXMubWVzc2FnZXM7XG4gICAgfVxuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5lcnJvck1lc3NhZ2VzID0gdGhpcy5lcnJvck1lc3NhZ2VTZXJ2aWNlLmVycm9yTWVzc2FnZXNcbiAgICAgIC5jb25jYXQodGhpcy5jdXN0b21FcnJvck1lc3NhZ2VzKVxuICAgICAgLnJldmVyc2UoKTtcbiAgfVxuXG4gIGdldCBsYWJlbCgpIHtcbiAgICBjb25zdCBsYWJlbCA9IHRoaXMuZWxSZWYubmF0aXZlRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwibGFiZWxcIik7XG4gICAgcmV0dXJuIGxhYmVsICYmIGxhYmVsLnRleHRDb250ZW50ID8gbGFiZWwudGV4dENvbnRlbnQudHJpbSgpIDogXCJUaGlzIGZpZWxkXCI7XG4gIH1cblxuICBnZXQgaXNEaXJ0eUFuZFRvdWNoZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuRm9ybUNvbnRyb2xOYW1lcy5zb21lKGMgPT4gYy5kaXJ0eSAmJiBjLnRvdWNoZWQpO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRNZXNzYWdlcygpOiBzdHJpbmdbXSB7XG4gICAgY29uc3QgbWVzc2FnZXMgPSBbXTtcbiAgICBpZiAoIXRoaXMuaXNEaXJ0eUFuZFRvdWNoZWQgfHwgdGhpcy52YWxpZGF0aW9uRGlzYWJsZWQpIHtcbiAgICAgIHJldHVybiBtZXNzYWdlcztcbiAgICB9XG5cbiAgICBjb25zdCBuYW1lcyA9IHRoaXMuRm9ybUNvbnRyb2xOYW1lcy5tYXAoZiA9PiBmLm5hbWUpO1xuXG4gICAgdGhpcy5Gb3JtQ29udHJvbE5hbWVzLmZpbHRlcihcbiAgICAgIChjLCBpKSA9PlxuICAgICAgICAhYy52YWxpZCAmJlxuICAgICAgICAhIWMuZXJyb3JzICYmXG4gICAgICAgIC8vIGZpbHRlciBvdXQgRm9ybUNvbnRyb2xOYW1lcyB0aGF0IHNoYXJlIHRoZSBzYW1lIG5hbWUgLSB1c3VhbGx5IGZvciByYWRpbyBidXR0b25zXG4gICAgICAgIG5hbWVzLmluZGV4T2YoYy5uYW1lKSA9PT0gaVxuICAgICkuZm9yRWFjaChjb250cm9sID0+IHtcbiAgICAgIE9iamVjdC5rZXlzKGNvbnRyb2wuZXJyb3JzKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgIGNvbnN0IGVycm9yID0gdGhpcy5lcnJvck1lc3NhZ2VzLmZpbmQoZXJyID0+IGVyci5lcnJvciA9PT0ga2V5KTtcbiAgICAgICAgaWYgKCFlcnJvcikge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBtZXNzYWdlcy5wdXNoKGVycm9yLmZvcm1hdCh0aGlzLmxhYmVsLCBjb250cm9sLmVycm9yc1trZXldKSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHJldHVybiBtZXNzYWdlcztcbiAgfVxufVxuIl19