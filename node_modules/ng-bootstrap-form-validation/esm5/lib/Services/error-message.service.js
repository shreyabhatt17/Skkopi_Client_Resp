/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable, Inject } from "@angular/core";
import { DEFAULT_ERRORS } from "../default-errors";
import { CUSTOM_ERROR_MESSAGES } from "../Tokens/tokens";
import * as i0 from "@angular/core";
import * as i1 from "../Tokens/tokens";
var ErrorMessageService = /** @class */ (function () {
    function ErrorMessageService(customErrorMessages) {
        this.customErrorMessages = customErrorMessages;
        this.defaultErrors = DEFAULT_ERRORS;
        this.errorMessages = customErrorMessages.reduce(function (acc, cur) { return acc.concat(cur); }, this.defaultErrors);
    }
    ErrorMessageService.decorators = [
        { type: Injectable, args: [{
                    providedIn: "root"
                },] },
    ];
    /** @nocollapse */
    ErrorMessageService.ctorParameters = function () { return [
        { type: Array, decorators: [{ type: Inject, args: [CUSTOM_ERROR_MESSAGES,] }] }
    ]; };
    /** @nocollapse */ ErrorMessageService.ngInjectableDef = i0.defineInjectable({ factory: function ErrorMessageService_Factory() { return new ErrorMessageService(i0.inject(i1.CUSTOM_ERROR_MESSAGES)); }, token: ErrorMessageService, providedIn: "root" });
    return ErrorMessageService;
}());
export { ErrorMessageService };
if (false) {
    /** @type {?} */
    ErrorMessageService.prototype.defaultErrors;
    /** @type {?} */
    ErrorMessageService.prototype.errorMessages;
    /** @type {?} */
    ErrorMessageService.prototype.customErrorMessages;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3ItbWVzc2FnZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctYm9vdHN0cmFwLWZvcm0tdmFsaWRhdGlvbi8iLCJzb3VyY2VzIjpbImxpYi9TZXJ2aWNlcy9lcnJvci1tZXNzYWdlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25ELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNuRCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQzs7OztJQVd2RCw2QkFDd0MsbUJBQXFDO1FBQXJDLHdCQUFtQixHQUFuQixtQkFBbUIsQ0FBa0I7NkJBTHJELGNBQWM7UUFPcEMsSUFBSSxDQUFDLGFBQWEsR0FBRyxtQkFBbUIsQ0FBQyxNQUFNLENBQzdDLFVBQUMsR0FBRyxFQUFFLEdBQUcsSUFBSyxPQUFBLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQWYsQ0FBZSxFQUM3QixJQUFJLENBQUMsYUFBYSxDQUNuQixDQUFDO0tBQ0g7O2dCQWZGLFVBQVUsU0FBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkI7Ozs7NENBT0ksTUFBTSxTQUFDLHFCQUFxQjs7OzhCQWRqQzs7U0FRYSxtQkFBbUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3QgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgREVGQVVMVF9FUlJPUlMgfSBmcm9tIFwiLi4vZGVmYXVsdC1lcnJvcnNcIjtcbmltcG9ydCB7IENVU1RPTV9FUlJPUl9NRVNTQUdFUyB9IGZyb20gXCIuLi9Ub2tlbnMvdG9rZW5zXCI7XG5pbXBvcnQgeyBFcnJvck1lc3NhZ2UgfSBmcm9tIFwiLi4vTW9kZWxzL2Vycm9yLW1lc3NhZ2VcIjtcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiBcInJvb3RcIlxufSlcbmV4cG9ydCBjbGFzcyBFcnJvck1lc3NhZ2VTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBkZWZhdWx0RXJyb3JzID0gREVGQVVMVF9FUlJPUlM7XG5cbiAgcHVibGljIGVycm9yTWVzc2FnZXM6IEVycm9yTWVzc2FnZVtdO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIEBJbmplY3QoQ1VTVE9NX0VSUk9SX01FU1NBR0VTKSBwdWJsaWMgY3VzdG9tRXJyb3JNZXNzYWdlczogRXJyb3JNZXNzYWdlW11bXVxuICApIHtcbiAgICB0aGlzLmVycm9yTWVzc2FnZXMgPSBjdXN0b21FcnJvck1lc3NhZ2VzLnJlZHVjZShcbiAgICAgIChhY2MsIGN1cikgPT4gYWNjLmNvbmNhdChjdXIpLFxuICAgICAgdGhpcy5kZWZhdWx0RXJyb3JzXG4gICAgKTtcbiAgfVxufVxuIl19