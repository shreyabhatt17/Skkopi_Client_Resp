/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Directive, Input, HostBinding, Optional, Host, SkipSelf, Inject } from "@angular/core";
import { ControlContainer } from "@angular/forms";
import { BootstrapVersion } from "../Enums/BootstrapVersion";
import { BOOTSTRAP_VERSION } from "../Tokens/tokens";
/**
 * @param {?} name
 * @param {?} parent
 * @return {?}
 */
export function controlPath(name, parent) {
    // tslint:disable-next-line:no-non-null-assertion
    return tslib_1.__spread(/** @type {?} */ ((parent.path)), [name]);
}
var FormControlDirective = /** @class */ (function () {
    function FormControlDirective(
    // this value might be null, but we union type it as such until
    // this issue is resolved: https://github.com/angular/angular/issues/25544
    parent, bootstrapVersion) {
        this.parent = parent;
        this.bootstrapVersion = bootstrapVersion;
    }
    Object.defineProperty(FormControlDirective.prototype, "validClass", {
        get: /**
         * @return {?}
         */
        function () {
            if (!this.control) {
                return false;
            }
            return (this.bootstrapFour &&
                this.control.valid &&
                (this.control.touched || this.control.dirty));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormControlDirective.prototype, "invalidClass", {
        get: /**
         * @return {?}
         */
        function () {
            if (!this.control) {
                return false;
            }
            return (this.bootstrapFour &&
                this.control.invalid &&
                this.control.touched &&
                this.control.dirty);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormControlDirective.prototype, "path", {
        get: /**
         * @return {?}
         */
        function () {
            return controlPath(this.formControlName, this.parent);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormControlDirective.prototype, "control", {
        get: /**
         * @return {?}
         */
        function () {
            return this.formDirective && this.formDirective.getControl(this);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormControlDirective.prototype, "formDirective", {
        get: /**
         * @return {?}
         */
        function () {
            return this.parent ? this.parent.formDirective : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormControlDirective.prototype, "bootstrapFour", {
        get: /**
         * @return {?}
         */
        function () {
            return this.bootstrapVersion === BootstrapVersion.Four;
        },
        enumerable: true,
        configurable: true
    });
    FormControlDirective.decorators = [
        { type: Directive, args: [{
                    // tslint:disable-next-line:directive-selector
                    selector: ".form-control,.form-check-input,.custom-control-input"
                },] },
    ];
    /** @nocollapse */
    FormControlDirective.ctorParameters = function () { return [
        { type: ControlContainer, decorators: [{ type: Optional }, { type: Host }, { type: SkipSelf }] },
        { type: BootstrapVersion, decorators: [{ type: Inject, args: [BOOTSTRAP_VERSION,] }] }
    ]; };
    FormControlDirective.propDecorators = {
        formControlName: [{ type: Input }],
        formControl: [{ type: Input }],
        validClass: [{ type: HostBinding, args: ["class.is-valid",] }],
        invalidClass: [{ type: HostBinding, args: ["class.is-invalid",] }]
    };
    return FormControlDirective;
}());
export { FormControlDirective };
if (false) {
    /** @type {?} */
    FormControlDirective.prototype.formControlName;
    /** @type {?} */
    FormControlDirective.prototype.formControl;
    /** @type {?} */
    FormControlDirective.prototype.parent;
    /** @type {?} */
    FormControlDirective.prototype.bootstrapVersion;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1jb250cm9sLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nLWJvb3RzdHJhcC1mb3JtLXZhbGlkYXRpb24vIiwic291cmNlcyI6WyJsaWIvRGlyZWN0aXZlcy9mb3JtLWNvbnRyb2wuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxLQUFLLEVBQ0wsV0FBVyxFQUNYLFFBQVEsRUFDUixJQUFJLEVBQ0osUUFBUSxFQUNSLE1BQU0sRUFDUCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsZ0JBQWdCLEVBQWUsTUFBTSxnQkFBZ0IsQ0FBQztBQUMvRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUM3RCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQzs7Ozs7O0FBRXJELE1BQU0sVUFBVSxXQUFXLENBQUMsSUFBWSxFQUFFLE1BQXdCOztJQUVoRSwyQ0FBVyxNQUFNLENBQUMsSUFBSSxLQUFHLElBQUksR0FBRTtDQUNoQzs7SUFxREM7OztJQU1VLE1BQXdCLEVBQ0csZ0JBQWtDO1FBRDdELFdBQU0sR0FBTixNQUFNLENBQWtCO1FBQ0cscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtLQUNuRTtJQWpESixzQkFDSSw0Q0FBVTs7OztRQURkO1lBRUUsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUU7Z0JBQ2pCLE9BQU8sS0FBSyxDQUFDO2FBQ2Q7WUFDRCxPQUFPLENBQ0wsSUFBSSxDQUFDLGFBQWE7Z0JBQ2xCLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSztnQkFDbEIsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUM3QyxDQUFDO1NBQ0g7OztPQUFBO0lBRUQsc0JBQ0ksOENBQVk7Ozs7UUFEaEI7WUFFRSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRTtnQkFDakIsT0FBTyxLQUFLLENBQUM7YUFDZDtZQUNELE9BQU8sQ0FDTCxJQUFJLENBQUMsYUFBYTtnQkFDbEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPO2dCQUNwQixJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU87Z0JBQ3BCLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUNuQixDQUFDO1NBQ0g7OztPQUFBO0lBRUQsc0JBQUksc0NBQUk7Ozs7UUFBUjtZQUNFLE9BQU8sV0FBVyxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZEOzs7T0FBQTtJQUVELHNCQUFJLHlDQUFPOzs7O1FBQVg7WUFDRSxPQUFPLElBQUksQ0FBQyxhQUFhLElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDbEU7OztPQUFBO0lBRUQsc0JBQUksK0NBQWE7Ozs7UUFBakI7WUFDRSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7U0FDdkQ7OztPQUFBO0lBRUQsc0JBQUksK0NBQWE7Ozs7UUFBakI7WUFDRSxPQUFPLElBQUksQ0FBQyxnQkFBZ0IsS0FBSyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUM7U0FDeEQ7OztPQUFBOztnQkFqREYsU0FBUyxTQUFDOztvQkFFVCxRQUFRLEVBQUUsdURBQXVEO2lCQUNsRTs7OztnQkFaUSxnQkFBZ0IsdUJBK0RwQixRQUFRLFlBQ1IsSUFBSSxZQUNKLFFBQVE7Z0JBaEVKLGdCQUFnQix1QkFrRXBCLE1BQU0sU0FBQyxpQkFBaUI7OztrQ0FyRDFCLEtBQUs7OEJBRUwsS0FBSzs2QkFHTCxXQUFXLFNBQUMsZ0JBQWdCOytCQVk1QixXQUFXLFNBQUMsa0JBQWtCOzsrQkF4Q2pDOztTQXNCYSxvQkFBb0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBEaXJlY3RpdmUsXG4gIElucHV0LFxuICBIb3N0QmluZGluZyxcbiAgT3B0aW9uYWwsXG4gIEhvc3QsXG4gIFNraXBTZWxmLFxuICBJbmplY3Rcbn0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IENvbnRyb2xDb250YWluZXIsIEZvcm1Db250cm9sIH0gZnJvbSBcIkBhbmd1bGFyL2Zvcm1zXCI7XG5pbXBvcnQgeyBCb290c3RyYXBWZXJzaW9uIH0gZnJvbSBcIi4uL0VudW1zL0Jvb3RzdHJhcFZlcnNpb25cIjtcbmltcG9ydCB7IEJPT1RTVFJBUF9WRVJTSU9OIH0gZnJvbSBcIi4uL1Rva2Vucy90b2tlbnNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGNvbnRyb2xQYXRoKG5hbWU6IHN0cmluZywgcGFyZW50OiBDb250cm9sQ29udGFpbmVyKTogc3RyaW5nW10ge1xuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tbm9uLW51bGwtYXNzZXJ0aW9uXG4gIHJldHVybiBbLi4ucGFyZW50LnBhdGghLCBuYW1lXTtcbn1cblxuQERpcmVjdGl2ZSh7XG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpkaXJlY3RpdmUtc2VsZWN0b3JcbiAgc2VsZWN0b3I6IFwiLmZvcm0tY29udHJvbCwuZm9ybS1jaGVjay1pbnB1dCwuY3VzdG9tLWNvbnRyb2wtaW5wdXRcIlxufSlcbmV4cG9ydCBjbGFzcyBGb3JtQ29udHJvbERpcmVjdGl2ZSB7XG4gIEBJbnB1dCgpXG4gIGZvcm1Db250cm9sTmFtZTogc3RyaW5nO1xuICBASW5wdXQoKVxuICBmb3JtQ29udHJvbDogc3RyaW5nO1xuXG4gIEBIb3N0QmluZGluZyhcImNsYXNzLmlzLXZhbGlkXCIpXG4gIGdldCB2YWxpZENsYXNzKCkge1xuICAgIGlmICghdGhpcy5jb250cm9sKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiAoXG4gICAgICB0aGlzLmJvb3RzdHJhcEZvdXIgJiZcbiAgICAgIHRoaXMuY29udHJvbC52YWxpZCAmJlxuICAgICAgKHRoaXMuY29udHJvbC50b3VjaGVkIHx8IHRoaXMuY29udHJvbC5kaXJ0eSlcbiAgICApO1xuICB9XG5cbiAgQEhvc3RCaW5kaW5nKFwiY2xhc3MuaXMtaW52YWxpZFwiKVxuICBnZXQgaW52YWxpZENsYXNzKCkge1xuICAgIGlmICghdGhpcy5jb250cm9sKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiAoXG4gICAgICB0aGlzLmJvb3RzdHJhcEZvdXIgJiZcbiAgICAgIHRoaXMuY29udHJvbC5pbnZhbGlkICYmXG4gICAgICB0aGlzLmNvbnRyb2wudG91Y2hlZCAmJlxuICAgICAgdGhpcy5jb250cm9sLmRpcnR5XG4gICAgKTtcbiAgfVxuXG4gIGdldCBwYXRoKCkge1xuICAgIHJldHVybiBjb250cm9sUGF0aCh0aGlzLmZvcm1Db250cm9sTmFtZSwgdGhpcy5wYXJlbnQpO1xuICB9XG5cbiAgZ2V0IGNvbnRyb2woKTogRm9ybUNvbnRyb2wge1xuICAgIHJldHVybiB0aGlzLmZvcm1EaXJlY3RpdmUgJiYgdGhpcy5mb3JtRGlyZWN0aXZlLmdldENvbnRyb2wodGhpcyk7XG4gIH1cblxuICBnZXQgZm9ybURpcmVjdGl2ZSgpOiBhbnkge1xuICAgIHJldHVybiB0aGlzLnBhcmVudCA/IHRoaXMucGFyZW50LmZvcm1EaXJlY3RpdmUgOiBudWxsO1xuICB9XG5cbiAgZ2V0IGJvb3RzdHJhcEZvdXIoKSB7XG4gICAgcmV0dXJuIHRoaXMuYm9vdHN0cmFwVmVyc2lvbiA9PT0gQm9vdHN0cmFwVmVyc2lvbi5Gb3VyO1xuICB9XG5cbiAgY29uc3RydWN0b3IoXG4gICAgLy8gdGhpcyB2YWx1ZSBtaWdodCBiZSBudWxsLCBidXQgd2UgdW5pb24gdHlwZSBpdCBhcyBzdWNoIHVudGlsXG4gICAgLy8gdGhpcyBpc3N1ZSBpcyByZXNvbHZlZDogaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci9pc3N1ZXMvMjU1NDRcbiAgICBAT3B0aW9uYWwoKVxuICAgIEBIb3N0KClcbiAgICBAU2tpcFNlbGYoKVxuICAgIHByaXZhdGUgcGFyZW50OiBDb250cm9sQ29udGFpbmVyLFxuICAgIEBJbmplY3QoQk9PVFNUUkFQX1ZFUlNJT04pIHByaXZhdGUgYm9vdHN0cmFwVmVyc2lvbjogQm9vdHN0cmFwVmVyc2lvblxuICApIHt9XG59XG4iXX0=